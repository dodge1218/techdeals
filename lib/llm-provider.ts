export interface LLMProvider {
  complete(prompt: string, maxTokens?: number): Promise<string>;
  embeddings?(texts: string[]): Promise<number[][]>;
}

class MockLLMProvider implements LLMProvider {
  async complete(prompt: string, maxTokens = 500): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    if (prompt.includes('write article') || prompt.includes('article about')) {
      return `# Mock Article Generated
      
This is a mock article about ${prompt.substring(0, 50)}...

## Why This Product?

Mock content explaining the benefits and features. This product offers great value because:

1. High quality components
2. Competitive pricing
3. Strong customer reviews
4. Reliable brand reputation

[Check Best Price on Amazon](#)
[Compare at Best Buy](#)

## Key Features

- Feature 1: Performance oriented
- Feature 2: Energy efficient
- Feature 3: Great warranty

[Shop Now on Newegg](#)

*Generated by MockLLM - Replace with real LLM for production*`;
    }
    
    if (prompt.includes('rank') || prompt.includes('score')) {
      return JSON.stringify({ score: 0.75, reasoning: 'Mock ranking result' });
    }
    
    return `Mock LLM response for: ${prompt.substring(0, 100)}...`;
  }
  
  async embeddings(texts: string[]): Promise<number[][]> {
    return texts.map(() => Array(384).fill(0).map(() => Math.random()));
  }
}

let provider: LLMProvider = new MockLLMProvider();

export function setLLMProvider(newProvider: LLMProvider) {
  provider = newProvider;
}

export function getLLMProvider(): LLMProvider {
  return provider;
}
